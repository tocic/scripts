#!/bin/bash
#
# Translate the selected text into the specified language.
#
# Dependencies: coreutils, gawk, jq, libnotify, sed, util-linux, wget, xsel

set -o nounset -o pipefail

readonly API_ENDPOINT="https://translate.googleapis.com/translate_a/single"
readonly USER_AGENT="Mozilla/5.0"

readonly L_OPTS="help"
readonly OPTS="h"

readonly CMD="${0##*/}"
readonly USAGE="${CMD} [OPTION]... LANG"
readonly USAGE_ERR_MSG=$(
  cat <<END
Usage: ${USAGE}
Try '${CMD} --help' for more information.
END
)
readonly HELP=$(
  cat <<END
SYNOPSIS
  ${USAGE}

DESCRIPTION
  Translate the selected text into LANG. Possible LANG values: en, de, etc.
  See https://cloud.google.com/translate/docs/languages for a complete list.

OPTIONS
  -h, --help
    display this help and exit
END
)

#######################################
# Encode special characters per RFC 3986
# Arguments:
#   str - string to encode
#######################################
function urlencode() {
  local -r str="$1"

  local -r LC_ALL="C"

  local char
  while IFS="" read -r -d "" -n 1 char; do
    case "${char}" in
      [-_.~a-zA-Z0-9])
        printf "%s" "${char}"
        ;;
      *)
        printf "%%%02x" "'${char}"
        ;;
    esac
  done < <(printf "%s" "${str}")
}

#######################################
# Main function
# Globals:
#   API_ENDPOINT - Google Translate API endpoint
#   CMD - script basename
#   HELP - help message
#   L_OPTS - long non-positional options (e.g. --help)
#   OPTS - short non-positional options (e.g. --h)
#   USAGE_ERR_MSG - usage error message
#   USER_AGENT - HTTP User-Agent header
#######################################
function main() {
  local opts
  opts=$(
    getopt \
      --options=${OPTS} --longoptions=${L_OPTS} \
      --name "${CMD}" \
      -- "$@"
  )
  if (($? != 0)); then
    echo "${USAGE_ERR_MSG}"
    exit 2
  fi

  eval set -- "${opts}"

  local need_help=false

  while true; do
    case "$1" in
      -h | --help)
        need_help=true
        shift
        break
        ;;
      --)
        shift
        break
        ;;
    esac
  done

  if [[ $need_help == true ]]; then
    echo "${HELP}"
    exit 0
  fi

  if (($# != 1)); then
    echo "${CMD}: expected 1 argument; got $#"
    echo "${USAGE_ERR_MSG}"
    exit 2
  fi

  local -r selection=$(xsel --output)

  local url="${API_ENDPOINT}?client=gtx&sl=auto&tl=$1&dt=t&q="
  url+=$(urlencode "${selection}")

  local translation
  translation=$(
    wget --output-document="-" --quiet --user-agent="${USER_AGENT}" "${url}" \
      | jq --join-output ".[0] | .[] | .[0]" 2>/dev/null
  )

  if (($? != 0)); then
    echo "${CMD}: unable to translate the selection '${selection}'"
    echo "Try to check the selection validity and your internet connection"
    exit 1
  fi

  notify-send --icon=info "${selection}" "${translation@E}"
}

main "$@"
